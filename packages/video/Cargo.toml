[package]
name = "fluent_video"
version = "0.1.0"
edition = "2024"
license = "Apache-2.0"
repository = "https://github.com/davidmaple/fluent-voice"
description = "Video streaming and processing components for fluent-voice ecosystem"
keywords = ["video", "streaming", "processing", "multimedia", "computer-vision"]
categories = ["multimedia::video", "multimedia::images", "algorithms"]

[lints]
rust.unsafe_code = "warn"

[lib]
path = "src/lib.rs"
name = "fluent_video"

[[bin]]
name = "video-chat"
path = "src/bin/video_chat.rs"

[features]
default = ["metal"]
test = []

# Backend features (mutually exclusive)
cuda = [
    "cudarc",
    "candle-core/cuda",
    "candle-nn/cuda",
    "candle-transformers/cuda",
]
metal = [
    "dep:metal",
    "candle-core/metal",
    "candle-nn/metal",
    "candle-transformers/metal",
]
accelerate = [
    "dep:accelerate-src",
    "candle-core/accelerate",
    "candle-nn/accelerate",
    "candle-transformers/accelerate",
]
mkl = [
    "dep:intel-mkl-src",
    "candle-core/mkl",
    "candle-nn/mkl",
    "candle-transformers/mkl",
]

# Serialization
bincode-serialization = ["dep:bincode"]
rkyv-serialization = ["dep:rkyv"]

# Optional features
flash-attn = ["dep:candle-flash-attn"]
nccl = ["cudarc/nccl"]
onnx = ["dep:candle-onnx"]

[dependencies]
# Workspace dependencies

fluent_voice_domain = { path = "../domain" }

# Core dependencies
async-trait = "0.1.89"
anyhow = "1.0.99"
async-stream = "0.3.6"
clap = { version = "4.5.47", features = ["derive"] }
bincode = { version = "2.0.1", optional = true }
rkyv = { version = "0.8.11", optional = true }
futures = "0.3.31"
rustls = "0.23.31"
rustls-platform-verifier = "0.6.1"
tokio-tungstenite = "0.27.0"
tracing = "0.1.41"
nanoid = "0.4.0"
parking_lot = "0.12.4"
postage = "0.5.0"
scopeguard = "1.2.0"
smallvec = "2.0.0-alpha.11"
tracing-subscriber = { version = "0.3.20", features = ["env-filter"] }
raw-window-handle = "0.6.2"
thiserror = "2.0.16"
url = "2.5.7"
pollster = "0.4.0"
winit = "0.30.12"
tokio = "1.47.1"

# Candle framework for local model inference
candle-core = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false }
candle-nn = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false }
candle-transformers = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false }
candle-flash-attn = { git = "https://github.com/huggingface/candle", branch = "main", optional = true }
candle-onnx = { git = "https://github.com/huggingface/candle", branch = "main", optional = true }
candle-metal-kernels = { git = "https://github.com/huggingface/candle", branch = "main" }

# Backend dependencies
accelerate-src = { version = "0.3.2", optional = true }
intel-mkl-src = { version = "0.8.1", optional = true, features = [
    "mkl-static-lp64-iomp",
] }
metal = { version = "0.32.0", optional = true, features = ["mps"] }
cudarc = { version = "0.17.3", optional = true, features = [
    "std",
    "cublas",
    "cublaslt",
    "curand",
    "driver",
    "nvrtc",
    "f16",
    "cuda-version-from-build-system",
    "dynamic-linking",
], default-features = false }
ug-metal = { version = "0.4.0", optional = true }
ug-cuda = { version = "0.4.0", optional = true }
libc = { version = "0.2", optional = true }
bindgen_cuda = { version = "0.1.5", optional = true }
fluent-voice-workspace-hack = { path = "../../workspace-hack" }
# naga = "26.0.0" # in workspace-hack


[target.'cfg(not(all(target_os = "windows", target_env = "gnu")))'.dependencies]
libwebrtc = { git = "https://github.com/zed-industries/livekit-rust-sdks" }
livekit = { git = "https://github.com/zed-industries/livekit-rust-sdks", features = [
    "__rustls-tls",
] }

[target.'cfg(any(target_os = "linux", target_os = "freebsd"))'.dependencies]
scap = "0.1.0-beta.1"

[target.'cfg(target_os = "macos")'.dependencies]
core-foundation = "0.10.1"
core-video = "0.4.3"
coreaudio-rs = "0.13.0"
objc2 = "0.6.2"
objc2-core-graphics = "0.3.1"
objc2-core-foundation = "0.3.1"
objc2-foundation = { version = "0.3", features = ["NSArray", "NSDictionary", "NSEnumerator", "NSError", "NSRange", "NSString", "NSValue"] }
accelerate-src = { version = "0.3", optional = true }
# AVFoundation for camera capture
av-foundation = "0.5.2"
core-media = "0.5.1"
dispatch2 = "0.3"
block2 = "0.6"
# Screen capture kit for modern screen capture
screen-capture-kit = "0.3.1"
# FFmpeg for video file reading - temporarily disabled due to build issues
ffmpeg-next = "8.0.0"

[dev-dependencies]
sha2 = "0.11.0-rc.2"
simplelog = "0.12.2"

# OS-specific acceleration dependencies
[target.'cfg(all(target_os = "linux", target_arch = "x86_64"))'.dependencies]
cudarc = { version = "0.17.3", optional = true, default-features = false, features = [
    "cublas",
    "cublaslt",
    "cudnn",
    "curand",
    "dynamic-linking",
    "f16",
    "std",
] }
intel-mkl-src = { version = "0.8", optional = true }

[target.'cfg(all(target_os = "windows", target_arch = "x86_64"))'.dependencies]
cudarc = { version = "0.17.3", optional = true, default-features = false, features = [
    "cublas",
    "cublaslt",
    "cudnn",
    "curand",
    "dynamic-linking",
    "f16",
    "std",
] }
intel-mkl-src = { version = "0.8", optional = true }

# accelerate-src already included in macos dependencies above

[target.'cfg(all(target_os = "linux", target_arch = "x86_64"))'.build-dependencies]
bindgen_cuda = { version = "0.1.5", optional = true }

[target.'cfg(all(target_os = "windows", target_arch = "x86_64"))'.build-dependencies]
bindgen_cuda = { version = "0.1.5", optional = true }

[build-dependencies]
# serde = { version = "1.0.219", features = ["derive"] } # in workspace-hack
# serde_json = "1.0.140" # in workspace-hack
