# ---------------------------------------------
#  koffee-candle workspace / library manifest
#  — targets desktop (native) by default —
#      ▸ production-ready build: `cargo build`
#      ▸ development build:      `cargo build --features dev`
#      ▸ WASM (browser):         `cargo build --target wasm32-unknown-unknown --features web`
# ---------------------------------------------

[package]
name = "fluent_voice_whisper"
version = "0.1.0"
edition = "2024"
license = "Apache-2.0"
repository = "https://github.com/davidmaple/fluent-voice"
description  = "OpenAI Whisper speech-to-text implementation with Candle ML framework"
readme = "README.md"
authors      = ["David Maple <david@cyrup.ai>"]
keywords = ["whisper", "stt", "speech-recognition", "openai", "candle"]
categories = ["multimedia::audio", "science", "algorithms"]

# ------------------------------------------------
#  Dependencies
# ------------------------------------------------
[dependencies]
# fluent-voice-workspace-hack = { path = "../../workspace-hack" }
fluent_voice_domain = { path = "../domain" }
cyrup_sugars = { git = "https://github.com/cyrup-ai/cyrup-sugars", branch = "main", package = "cyrup_sugars", features = ["all"] }


# — DSP / NN (base dependencies - no acceleration features) —
candle-core = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false }
candle-nn = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false }
candle-transformers = { git = "https://github.com/huggingface/candle", branch = "main", default-features = false }

# — Optional acceleration dependencies —
half = { version = "2.6.0", optional = true }

# Platform-specific acceleration dependencies
cudarc = { version = "0.17", optional = true, default-features = false, features = ["cublas", "cublaslt", "cudnn", "curand", "dynamic-linking", "f16", "std"] }
metal = { version = "0.32.0", optional = true }
bindgen_cuda = { version = "0.1.5", optional = true }
candle-kernels = { git = "https://github.com/huggingface/candle", branch = "main", optional = true }
candle-metal-kernels = { git = "https://github.com/huggingface/candle", branch = "main", optional = true }

# — audio / resampling —
# rubato         = { version = "0.16", default-features = false, features = ["fft_resampler"] } # in workspace-hack
# rustfft        = { version = "6.3.0", default-features = false } # in workspace-hack
hound          = "3.5.1"
js-sys = { version = "0.3.77", optional = true }
web-sys = { version = "0.3.77", optional = true }
# — containers / utils —
arrayvec       = "0.7.6"
smallvec = "2.0.0-alpha.11"
indexmap       = "2.10.0"
thiserror      = "2"
# log            = "0.4.27" # in workspace-hack

# — serde / misc —
# serde          = { version = "1.0.219", features = ["derive"], default-features = false } # in workspace-hack
# serde_json     = "1.0.140" # in workspace-hack
ciborium       = "0.2.2"
# strum          = { version = "0.27", features = ["derive"] } # in workspace-hack

# — optional parallelism (desktop only) —
rayon          = { version = "1", optional = true }
symphonia = { version = "0.5.4", optional = true }
anyhow = "1"
clap = { version = "4.5", features = ["derive"] }
tokio = { version = "1", features = ["rt", "sync", "macros"] }
serde_json = "1"
byteorder = "1.5.0"

# — browser bindings (wasm32 build only) —
wasm-bindgen   = { version = "0.2.100", optional = true }
console_error_panic_hook = { version = "0.1.7", optional = true }

# tokio          = { version = "1.45.1", features = ["rt", "sync"], optional = true } # in workspace-hack
# futures-core   = { version = "0.3.31", optional = true } # in workspace-hack
# futures-util   = { version = "0.3.31", optional = true } # in workspace-hack
async-stream   = { version = "0.3.6", optional = true }
futures-core = "0.3.31"
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
# candle-transformers already defined above as optional
tokenizers = "0.21.4"
cpal = { version = "0.16.0", optional = true }
ndarray = "0.16.1"
rand = "0.9.2"
rubato = { version = "0.16.2", optional = true }
tracing-chrome = "0.7.2"

# Optional acceleration dependencies
# half already defined above

# Optional ML/data dependencies
image = { version = "0.25.6", optional = true }
num-traits = { version = "0.2", optional = true }
palette = { version = "0.7.6", optional = true }
enterpolation = { version = "0.3.0", optional = true }
pyo3 = { version = "0.25.1", features = ["auto-initialize", "abi3-py311"], optional = true }
pdf2image = { version = "0.1.3", optional = true }
safetensors = { version = "0.6", optional = true }
csv = { version = "1.3.1", optional = true }
progresshub = { path = "../../../progresshub/packages/progresshub" }
hf-hub = "0.4.3"
dirs = "6.0.0"
fluent-voice-workspace-hack = { path = "../../workspace-hack" }

# ------------------------------------------------
#  Feature flags
# ------------------------------------------------
[features]
# ───────────── default: desktop, release-ready ─────────────
default = ["desktop"]

# --- Core build flavours -----------------------------------
desktop = ["rayon"]          # native build – includes SIMD & Rayon
web     = ["wasm-bindgen",
           "js-sys",
           "web-sys/Window",
           "console_error_panic_hook"] # wasm32-unknown-unknown target

# --- Developer conveniences (opt-in) -----------------------
dev = ["debug", "desktop"]   # ← enable with `--features dev`
debug = []                   # extra logging / assertions

# --- Candle backend features (required for all candle crates) -----
cuda = ["dep:cudarc", "dep:bindgen_cuda", "dep:candle-kernels", "candle-core/cuda", "candle-nn/cuda", "candle-transformers/cuda"]
cudnn = ["cuda", "cudarc/cudnn"]
metal = ["dep:metal", "dep:candle-metal-kernels", "candle-core/metal", "candle-nn/metal", "candle-transformers/metal"]
accelerate = ["dep:accelerate-src", "candle-core/accelerate", "candle-nn/accelerate", "candle-transformers/accelerate"]
mkl = ["dep:intel-mkl-src", "candle-core/mkl", "candle-nn/mkl", "candle-transformers/mkl"]

# --- Optional extended functionality -----------------------
record = []                  # WAV recording of detection windows
display = []                 # SVG / terminal visualisations
audio   = []                 # gate any OS-specific audio I/O that may be added
microphone = ["dep:cpal", "dep:rubato"]
encodec = ["dep:cpal", "dep:symphonia", "dep:rubato"]
mimi = ["dep:cpal", "dep:symphonia", "dep:rubato"]
snac = ["dep:cpal", "dep:symphonia", "dep:rubato"]
depth_anything_v2 = ["dep:palette", "dep:enterpolation"]

# Ensure mutually-exclusive defaults:
# (cargo resolves additive sets – desktop or web must be explicit)

[dev-dependencies]
byteorder = "1.5.0"
imageproc = "0.25.0"
memmap2 = "0.9.7"
ab_glyph = "0.2.31"

# OS-specific acceleration dependencies
[target.'cfg(all(target_os = "linux", target_arch = "x86_64"))'.dependencies]
intel-mkl-src = { version = "0.8.1", optional = true }

[target.'cfg(all(target_os = "windows", target_arch = "x86_64"))'.dependencies]
intel-mkl-src = { version = "0.8.1", optional = true }

[target.'cfg(target_os = "macos")'.dependencies]
accelerate-src = { version = "0.3.2", optional = true }

[build-dependencies]
anyhow = "1"
